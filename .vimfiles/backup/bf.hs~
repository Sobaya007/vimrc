import Data.Array.IO
import Data.IORef
import Data.Char

main = do
 let bf = ">+++++++++[<++++++++>-]<.>+++++++[<++++>" ++
         "-]<+.+++++++..+++.[-]>++++++++[<++++>-]<" ++
         ".>+++++++++++[<+++++>-]<.>++++++++[<+++>" ++
         "-]<.+++.------.--------.[-]>++++++++[<++" ++
         "++>-]<+.[-]++++++++++.";
 jmp <- newArray (0, length bf + 1) 0 :: IO (IOUArray Int Int)
 loops <- newIORef []
 let loop i | i < length bf = do
      tmp <- readIORef loops
      let func '[' = writeIORef loops $ i : tmp
          func ']' = do
           let start = tmp !! 0
           writeArray jmp start i
           writeArray jmp i start
          func _ = return ()
      func $ bf !! i
      loop $ i+1
     loop _ = return ()
 loop 0
 m <- newArray (0, 30000) 0 :: IO (IOUArray Int Int)
 let loop2 pc r | pc < length bf = do
      tmp <- readArray m r
      jmpTo <- readArray jmp pc
      let func '+' = do
           writeArray m r $ tmp+1
           loop2 (pc+1) r
          func '-' = do
           writeArray m r $ tmp-1
           loop2 (pc+1) r
          func '>' = 
           loop2 (pc+1) (r+1)
          func '<' = 
           loop2 (pc+1) (r-1)
          func '.' = do
           putChar $ chr $ fromIntegral tmp
           loop2 (pc+1) r
          func '[' = do
           if tmp == 0
            then loop2 (jmpTo+1) r
            else loop2 (pc+1) r
          func ']' = do
           if tmp /= 0
            then loop2 jmpTo r
            else loop2 (pc+1) r
      func $ bf !! pc
     loop2 _ _ = return ()
 loop2 0 0
