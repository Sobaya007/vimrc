module player.ParticleManager;

import player.Constant;
import player.Particle;
import sbylib;

class ParticleManager {

  package Particle[] particles;

  this() {
    this.particles = createParticle;
  }

  Particle[] getParticles() {
    return particles;
  }

  private Particle[] createParticle() {
    auto vertex = Sphere.getVertices(recursionLevel);
    auto indices = Sphere.getIndices(recursionLevel);
    uint[][] pairIndex;
    alias makePair = (a,b) => a < b ? [a,b] : [b,a];
    //隣を発見
    foreach (i; 0..indices.length) {
      auto idx0 = indices[i][0];
      auto idx1 = indices[i][1];
      auto idx2 = indices[i][2];

      if (pairIndex.canFind(makePair(idx0,idx1)) == false) pairIndex ~= makePair(idx0,idx1);
      if (pairIndex.canFind(makePair(idx1,idx2)) == false) pairIndex ~= makePair(idx1,idx2);
      if (pairIndex.canFind(makePair(idx2,idx0)) == false) pairIndex ~= makePair(idx2,idx0);
    }
    Particle[] particleList;
    foreach (v; vertex) {
      particleList ~= new Particle(v);
    }
    foreach (i; pairIndex) {
      particleList[i[0]].next ~= particleList[i[1]];
      particleList[i[1]].next ~= particleList[i[0]];
    }
    foreach(p; particleList) {
      bool ok = true;
      foreach (n; p.next) if (n.isStinger) ok = false;
      if (ok) p.isStinger = true;
    }
    particleList.each!( p => p.position += vec3(0,0,5));
    return particleList;
  }
}
