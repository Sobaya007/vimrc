module enemy.GameAI;

import sbylib;
import collision;
import enemy.EnemyCollisionObject;
import player;

class GameAI : Primitive, Entity{
  protected EnemyCollisionObject collisionObject;
  private static vec3 playerPos;
  protected static vec3 up = vec3(0.0,1.0,0.0);
  protected ulong HP = 0;
  abstract bool step();

  protected vec4[] vertices;
  protected uint[][] indices;

  this(){
    HP = 1145141919810;
    PlayerAnnouncer.getInstance.addListener(info => setPlayerPos(info.pos));
  }

  //プレイヤーの位置を渡す
  public vec3 getPlayerPos(){
    return playerPos;
  }

  //渡された位置をプレイヤーの位置とする。
  public void setPlayerPos(vec3 pos){
    playerPos = pos;
  }
  //プレイヤーとの距離を計算
  public vec3 getDistance(){
    return playerPos - getPos();
  }

  public vec4[] getVertices(){ return vertices; };

  public uint[][] getIndices(){ return indices; };

  //二つのベクトルのなす角を得る。
  public float getAng(vec3 v1,vec3 v2){
    if(cross(v1.normalize(),v2.normalize()).y >= 0){
      return acos(min(1.0,dot(v1.normalize,v2.normalize())));
    }else{
      return -acos(min(1.0,dot(v1.normalize,v2.normalize())));
    }
  }

  // 衝突オブジェクトの作成と8分木への登録
  void addCollisionObject(Octree octree) {
    this.collisionObject = new EnemyCollisionObject(this.getVertices(),this.getIndices());
    this.collisionObject.setOctree(octree);
    this.collisionObject.listener = (std.container.Array!CollisionInfo collisionInfo){};
    this.collisionObject.addToOctree();
  }

  //元のオブジェクトの変形後の衝突オブジェクトの変形
  void transFormCollision(){
    collisionObject.shape.Position = getPos();
    collisionObject.shape.update;
  }

  //衝突応答
  void reactCollision(){
    if (collisionObject !is null) {
      //collisionObject.listener(collisionObject.collisionInfo);
      //collisionObject.clearInfo();
      collisionObject.shape.pos = getPos();
      collisionObject.shape.update;
    }
    collisionObject.update;
  }

  override string toString() {
    return "GameAI";
  }
}
