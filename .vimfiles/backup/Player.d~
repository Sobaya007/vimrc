module player.Player;

import sbylib;
import collision;
import player;
import player.Input;
import player.Particle;
import player.PlayerChaser;
import player.PlayerCollisionManager;
import player.PlayerDrawer;
import player.PlayerShape;
import player.PlayerState;
import player.ParticleManager;

import player.elastic.ElasticState;
import player.needle.NeedleState;
import player.dodge.DodgeState;

class Player : WorldObject ,Entity, Drawable {

  package PlayerState state;
  package PlayerShape shape;
  package PlayerChaser cameraManipulator;
  package PlayerDrawer drawer;
  package PlayerCollisionManager colManager;
  package ParticleManager pManager;
  package float omega = 0;
  package PhysicsWorld3D world;

  private PlayerState[string] stateList;

  this(Octree octree, PhysicsWorld3D world) {
    this.world = world;
    pManager = new ParticleManager();

    drawer = new PlayerDrawer();
    drawer.vertexNum = pManager.particleNum;
    drawer.normalNum = pManager.particleNum;

    colManager = new PlayerCollisionManager(this, octree);
    shape = new PlayerShape();
    state = createState!("Elastic")();

    EntityManager.add(this);

    cameraManipulator = new PlayerChaser(SbyWorld.currentCamera, this);
    EntityManager.add(cameraManipulator);

  }

  override bool step() {
    pos = shape.getCameraTarget();
    state = state.step();
    shape.step();
    colManager.update();
    moveCamera();
    return true;
  }

  override bool draw() {
    return drawer.draw;
  }

  PlayerState getState() {
    return state;
  }

  PlayerShape getShape() {
    return shape;
  }

  PlayerState createState(string str)() {
    auto result = { 
      auto p = str in stateList;
      if (p) return *p;
      final switch (str) {
        case "Elastic":
          return stateList[str] = new ElasticState(this);
        case "Needle":
          return stateList[str] = new NeedleState(this, drawer, pManager, colManager);
        case "Dodge":
          return stateList[str] = new DodgeState(this, drawer, pManager, colManager);
      }
      assert(false, str);
    }();
    result.init();
    return result;
  }

  private void moveCamera() {
//    auto alpha = .01145141919810 / 10 * joyStick().getAxis(JoyStick.Axis.RightX);
//    this.omega += alpha;
//    this.omega *= 0.95;
//    auto v = SbyWorld.currentCamera.getPos - shape.gravityPoint;
//    auto rot = mat4.rotAxisAngle(vec3(0,1,0), this.omega);
//    v = (rot * vec4(v, 1)).xyz;
//    with (SbyWorld.currentCamera) {
//      pos = shape.gravityPoint + v;
//      vecX = (rot * vec4(getVecX, 0)).xyz;
//      vecY = (rot * vec4(getVecY, 0)).xyz;
//      vecZ = (rot * vec4(getVecZ, 0)).xyz;
//    }
  }
  override string toString() {
    return "Player";
  }

}
