module enemy.EnemyCollisionObject;

import sbylib;
import collision;
import enemy.GameAI;

class EnemyCollisionObject : CollisionObject {

  private vec3[] vertices;
  Shape shape;

  this(vec4[] vertices,uint[][] indices){
    this.vertices = vertices.map!(a => a.xyz).array;
    updateAABB;
    super(shape = new ConvexHull(this.vertices,indices));
  }


  override void update() {
    updateAABB;
    super.update;
    super.shape.draw();
  }

<<<<<<< HEAD
  override uint getOrder() {
    return 30;
  }

=======
>>>>>>> crystal_fix
  private:
  void updateAABB() {
    _aabb.minimum.x = vertices.map!(a => a.x).reduce!((a,b) => a < b ? a : b);
    _aabb.minimum.y = vertices.map!(a => a.y).reduce!((a,b) => a < b ? a : b);
    _aabb.minimum.z = vertices.map!(a => a.z).reduce!((a,b) => a < b ? a : b);
    _aabb.maximum.x = vertices.map!(a => a.x).reduce!((a,b) => a > b ? a : b);
    _aabb.maximum.y = vertices.map!(a => a.y).reduce!((a,b) => a > b ? a : b);
    _aabb.maximum.z = vertices.map!(a => a.z).reduce!((a,b) => a > b ? a : b);
  }
}
