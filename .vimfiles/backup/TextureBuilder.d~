module sbylib.gl.TextureBuilder;

import sbylib;

class TextureBuilder(T) 
  if (
      is (T == ubyte ) || 
      is (T == byte)   || 
      is (T == ushort) || 
      is (T == short)  || 
      is (T == uint)   || 
      is (T == int)    || 
      is (T == float)  || 
     ){
    private:
      TextureTarget target;
      uint level;
      TextureInternalFormat internalFormat;
      uint width, height;
      TextureInternalFormat format;
      uint type;
      TextureWrap wrapS, wrapT;
      TextureFilter minFilter, magFilter;

      invariant {
        if (target == TextureTarget.TextureRectangle) {
          assert(level == 0, "If target's name includes Rectangle, level must be 0.");
          assert(wrapS != TextureWrap.Repeat, "If target's name includes Rectangle, WrapType cannot be Repeat");
          assert(wrapS != TextureWrap.Repeat, "If target's name includes Rectangle, WrapType cannot be Repeat");
        }
      }
    public:
      this() {
        target = TextureTarget.Texture2D;
        level = 0;
        internalFormat = format = TextureInternalFormat.RGBA;
        width = 256;
        height = 256;
        type = typeConstant!T;
        s
      }

      /*テクスチャがどんな用途で使われるかを決定します。
        Texture2D       2Dで表された画像データとして使われます。普通はこれを使います。
        Texture1DArray  高さが1の画像データを扱います。
        TexureRectangle 基本的にはTexture2Dと同じですが、
          - UV座標の値が[0,1]ではなく画像のピクセル数になる
          - MipMapが使えない
          - WrapにRepeat系を使えない
         といった点が違います。
        */
      void setTarget(TextureTrget target) {
        this.target = target;
      }
  }
