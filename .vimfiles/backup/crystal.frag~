#version 330
uniform vec3 lightPos;
uniform vec3 cameraPos;
uniform sampler2D mTexture;
uniform float glowing;

out vec4 FragColor;

in vec4 p;
in vec3 rawP;
in vec3 n;
in vec2 tc;
in vec4 screenPos;
in float bulge; //0,1-2
// crystal cyan

// ref : https://www.shadertoy.com/view/Xt2SDc
// CC BY 3.0

float objdetal(in vec3 p) {
  float res = 0.;
  vec3 c = p;
  for (int i = 0; i < 10; ++i) {
    p =1.7*abs(p)/dot(p,p) -0.8;
    p=p.zxy;
    res += exp(-20. * abs(dot(p,c)));
  }
  return res/2.;
}
vec4 objdensity(vec3 pointpos,vec3 dir){
  vec4 color=vec4(0.);
  float den = 0.;
  vec3 sphere = pointpos + 0.15*dir;
  float dd = 0;
  vec4 col;
  col.a = objdetal(sphere);
  float c = col.a/200.;
  col.rgb = vec3(c,c,c*c);
  col.rgb *= col.a;
  col.rgb *= 1./20.;
  color += col*0.8;
  return color*3700.;
}

void main() {
  vec2 scrPos = screenPos.xy / screenPos.w / 2. + 0.5;
  if(bulge>=1.){
    vec3 background = texture(mTexture,scrPos).xyz;
    float al = pow(2.-bulge,2.);
    FragColor.rgb = vec3(0);
    FragColor.rgb += vec3(0.1,0.5,0.7) * al * 2.;
  }else{
    vec3 nrm = normalize(n);
    vec3 pos = p.xyz / p.w;
    vec3 camV = normalize(pos-cameraPos);
//    if(dot(nrm,-camV)<0.)discard;
    vec3 refrP = vec3(0);
    vec3 refrV = camV;
    refrV = refract(refrV,nrm,1./1.5);
    refrP += refrV * max(0.,dot(nrm,-camV)) * 0.1;
    refrV = refract(refrV,-reflect(nrm,camV),1./1.5);
    refrP += refrV * 0.1;
    //Schmidt orthonormalization
    vec3 e1 = camV;
    vec3 e2 = vec3(0,1,0);
    e2 = normalize(e2 - dot(e1,e2)*e1);
    vec3 e3 = -cross(e1,e2);
    vec2 diffV = vec2(dot(e3,refrP),dot(e2,refrP));
    vec2 txPos = scrPos + diffV * 2.;

    vec3 background = texture(mTexture,txPos).xyz;
    vec3 ligV = normalize(lightPos-pos);

    vec3 centV = rawP;
    float gradE = pow(max(0.,dot(nrm,-camV)),0.8);
    float gradD = max(0.,dot(normalize(centV/vec3(1,4,1)),-camV));
    vec3 col = mix(vec3(0.1,0.3,0.9),vec3(0.1,1.0,0.2),pow(gradE*gradD,1.1));
    col = mix(vec3(0,0,1),col,gradE);
    //col += 1./pow(length(centV),2.);
    background *= col * 2.;
    background += (dot(ligV,nrm)*0.5+0.5)*0.25;
    float hil = pow(max(0.,dot(ligV,reflect(camV,nrm))),5.);
    col += hil;
    hil += objdensity(rawP/4.,camV).x * 0.5 * 1.5;
    float alpha = max(0.0,pow(1.-abs(dot(-camV,nrm)),1.));
    background.z += background.x + background.y;

    float cHil = objdensity(rawP/8.,camV).x;
    FragColor.rgb = background + col + hil/2. + cHil/2.;
    //FragColor.rgb = FragColor.rgb * 0.00001 + vec3(background);
    FragColor.rgb = vec3(0,0,0);
  }

  FragColor.w = 1.;
}
