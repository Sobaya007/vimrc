module player.ElasticSphereDrawer;

import sbylib;

class ElasticSphereDrawer : PlayerDrawer {

  override CustomObject createCustomObject() {
    auto custom = new CustomObject( new Material, ShaderStore.getshader("Sphere"), Prim.Triangle);
    custom.beginMesh;
    custom.addAttribute!(3, "mVertex")(reduce!((a,b) => a ~ b.array)(cast(float[])[], vertex).array, GpuSendFrequency.Stream);
    custom.addAttribute!(3, "mNormal")(reduce!((a,b) => a ~ b.normalize.array)(cast(float[])[], vertex).array, GpuSendFrequency.Stream);
    custom.setIndex(indices.map!(faceIndex => iota(1,faceIndex.length-1).map!(idx => [faceIndex[0], faceIndex[idx], faceIndex[idx+1]]).reduce!((a,b) =>a ~ b)).reduce!((a,b) =>a ~ b), GpuSendFrequency.Static);
    custom.setUniform!(3, "lightPos")([0, 20, 0]);
    custom.setUniformMatrix!(4,"mWorld")(mat4.identity.array);
    custom.setUniform!(1, "glowing")([0]);
    custom.addDynamicUniformMatrix!(4, "mViewProj")({return SbyWorld.currentCamera.getViewProjectionMatrix.array;});
    custom.addDynamicUniform!(3, "cameraPos")({return SbyWorld.currentCamera.getPos.array;});
    custom.addDynamicUniform!(1, "transformCount")({return [elasticSphere.transformProcess];});
    custom.endMesh();
    return custom;
  }


}
