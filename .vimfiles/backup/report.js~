Scenes.add((()=>{

var Theme = Scenes.theme;
var jobName = Scenes.jobName;
var stgFlags = Scenes.stgFlags;

var sumScore = 0;
var scoreCompletion = 0;
var scorePlanning = 0;
var scoreMember = 0;
function calcScore(){
  scoreCompletion = 0;
  var sumW = 0;
  var numTasks = 0;
  Schedule.allTask.forEach((t)=>{
    var weight = t.info.period;
    scoreCompletion += weight * t.shinchoku;
    sumW += weight;
    if(t.shinchoku>0.5)numTasks++;
  });
  scoreCompletion /= sumW * 1.1;
  scoreCompletion *= 100;

  if(numTasks==0)scorePlanning = 0;
  else scorePlanning = Math.min(100,Math.max(0,100*(numTasks-Schedule.dependCollided)/numTasks-Schedule.changeSchedule*5));

  scoreMember = 0;
  if(Schedule.memberList.length!=0){
    var levS = 0;
    Schedule.memberList.forEach((m)=>{
      var level = 0;
      var levelHP = 0.5 * m.hp / 5;
      var levelShiki = m.shiki;
      if (levelHP < 0) levelHP = 0;
      if (levelShiki < 0) levelShiki = 0;
      if (levelHP > 0.5) levelHP = 0.5;
      if (levelShiki > 0.5) levelShiki = 0.5;
      level = levelHP + levelShiki;
      levS += level;
    });
    scoreMember = 100 * levS / Schedule.memberList.length;
  }

  sumScore = (scoreCompletion*4 + scorePlanning + scoreMember) / 6;
  scoreCompletion = Math.floor(scoreCompletion);
  scorePlanning = Math.floor(scorePlanning);
  scoreMember = Math.floor(scoreMember);
  sumScore = Math.floor(sumScore);
}

var Report = Poyo.scene("Report",(Po,isFinal)=>{
  var scene = {};
  var bgImg = Picture.get("report");

  var rect = new Stg.Rect({x:0,y:0,w:500,h:600});
  var flags = {};
  calcScore();

  stgFlags.forEach((a)=>{
    var name = a[0].split('.');
    var fi = flags;
    for(var i=0;i<name.length-1;i++){
      if(!fi[name[i]])fi[name[i]]={};
      fi = fi[name[i]];
    }
    var id = a[1];
    var task = Schedule.getTaskById(id).shinchoku;
    if(Math.abs(task-1) < 0.0001){
      fi[name[name.length-1]] = true;
    }else{
      fi[name[name.length-1]] = false;
    }
  });
  console.log(flags);

  var stgemu = new Stg.Emulator(rect,flags);
  var iter = 0;
  if(!flags.title){
    iter = 258;
  }
  var wait = Po.ease(-1).cubic.in(150);
  var scoreE = Po.ease(-5).quad.in(60);
  var scWait = Po.ease(-1).quad.in(150);
  var pret = Po.ease(-Po.size.y*0.1).cubic.in(20);
  var next = Po.ease(-Po.size.y*0.9).cubic.in(40);

  scene.spawn = ()=>{
    Music.stop("sdt");
  }
  scene.step = ()=>{
    let input = 0;
    if(iter < Stg.plpat.length)input = Stg.plpat[iter++];
    stgemu.step(Po,input);
    if(stgemu.end && wait.at()<-0.01){
      wait.set(1);
    }
    if(isFinal){
      if(wait.done && scoreE.at()<-0.01){
        scoreE.set(0);
      }
      if(scoreE.done && scWait.at()<-0.01){
        scWait.set(1);
      }
      if(scWait.done && pret.at()<-0.01){
        pret.set(0);
      }
      if(pret.done){
        Po.transit("ProgressDisplay",isFinal);
        next.set(0);
      }
    }else{
      if(wait.done && pret.at()<-0.01){
        pret.set(0);
      }
      if(pret.done){
        Po.transit("ProgressDisplay",isFinal);
        next.set(0);
      }
    }
  };
  scene.end = (t,kill)=>{
    if(next.done){
      Music.stop("stg-bgm");
      Music.loop("sdt");
      kill();
    }
  };
  scene.draw = (R,acc)=>{
    Shape.image("report").scale(640/bgImg.width,480/bgImg.height).with(R.fill(Color.white).draw);
    Shape.rect(Po.size.x,Po.size.y).invert().with(R.fill(Color.black).centerShadow(20).draw);
    R.translated(167,35,()=>{
      R.scaled(0.543,0.540,()=>{
        R.clipped(0,0,800,600,()=>{
          stgemu.draw(R,Po);
        });
      });
    });
    Shape.text(isFinal?"最終発表":"中間発表").leftUp.scale(30,30).translate(15,15).with(R.fill(Theme.text).shadow(5).draw);
    R.withAlpha(1+scoreE()/5.0,()=>{
      Shape.text(sumScore.toString()+"点").center.scale(200-40/4*scoreE(),200-40/4*scoreE()).rotate(-15*Math.PI/180+Math.PI*scoreE()).translate(400,130).with([
        R.stroke(0.05,Theme.text).shadow(5).draw,
        R.fill(Theme.button).shadow(30).draw
      ]);
    });
    Shape.roundrect(10,80,4).with(Shape.translate(-5,-80)).rotate(15*Math.PI/180+Math.sin(Po.time*Math.PI/90)*10*Math.PI/180).translate(95,375).with([
      R.fill(Color.white).shadow(10).draw,
      R.stroke(2,Color.black).draw
    ]);
    R.translated(0,next()+pret(),()=>{
      Shape.rect(Po.size.x,Po.size.y).with(R.fill(Theme.bg).draw);
      acc();
      Shape.rect(Po.size.x,Po.size.y).with(R.stroke(2,Theme.frame).draw);
    });
  };
  return scene;
});

var Result = Poyo.scene("Result",(Po)=>{
  var scene = {};
  var plate = Po.ease(-60).cubic.in(40);

  var Task;
  var tabX = Po.size.x * 0.25;
  var tabY = Po.size.y * 0.35;
  var tabW = Po.size.x * 0.6;
  var tabH = Po.size.y * 0.6;
  var table = Shape.rect(tabW,tabH);
  table.translate(tabX,tabY);
  var tdX = Po.ease(0).cubic.inOut(5);
  var itX = Po.ease(0).cubic.inOut(10);
  Poyo.tdX = tdX;

  function numT(d,s,sc,dy,r){
    var dW = Shape.numText(d.toString());
    var sW = Shape.text(s);
    var aW = dW.size.x - (dW.size.x + sW.size.x + 0.1) / 2;
    aW *= sc;
    Shape.numText(d.toString()).right.scale(sc,sc).translate(aW,dy).with(r);
    Shape.text(s).left.scale(sc*0.9,sc*0.9).translate(aW,dy).with(r);
  }

  var leftBtn = Shape.polygon([0,0,30,-15,30,15,0,0]).with(Shape.translate(15,-7)).with(Po.button(()=>{
    Music.once("move");
    if(tdX.at()!=0){
      tdX.set(tdX.at()-1);
      Task.setButtons(tdX.at(),itX.at());
      Task.reiD.force(-1);
      Task.reiD.set(0);
      if(tdX.at()==0)leftBtn.disable();
      rightBtn.enable();
    }
  }));
  var rightBtn = Shape.polygon([0,0,-30,-15,-30,15,0,0]).with(Shape.translate(-15,-7)).with(Po.button(()=>{
    Music.once("move");
    if(tdX.at()!=8){
      tdX.set(tdX.at()+1);
      Task.setButtons(tdX.at(),itX.at());
      Task.reiD.force(1);
      Task.reiD.set(0);
      if(tdX.at()==8)rightBtn.disable();
      leftBtn.enable();
    }
  }));
  leftBtn.translate(tabX+10,tabY+tabH/12);
  rightBtn.translate(tabX+tabW-10,tabY+tabH/12);
  if(tdX.at()==0)leftBtn.disable();
  if(tdX.at()==8)rightBtn.disable();
   
  Task = (()=>{
    var k = {};
    k.carry = null;
    k.reiD = Po.ease(0).cubic.inOut(5);
    k.itmD = Po.ease(0).cubic.inOut(10);

    k.regd = [];//registered tasks
    k.item = [];//free tasks
    var jobx = [0,0,0,0];
    var joby = [0,0,0,0];
    Schedule.allTask.forEach((t)=>{
      if(t.assign != null){
        var mem = 0;
        for(var i=0;i<Schedule.memberList.length;i++){
          if(t.assign == Schedule.memberList[i])mem = i;
        }
        k.regd.push({
          x:t.startDate, // date
          y:mem, // member
          e:t.assign.job, // job
          w:t.info.period, // width
          p:t.shinchoku, // progress
          i:t.info.id, // id
          t:t.info.name // title
        });
      }else{
        var i = t.info.job;
        var hei = [27,37,43,43];
        if(jobx[i]+t.info.period > 2)jobx[i]=0, joby[i]++;
        k.item.push({
          x:10+80*jobx[i],
          y:10+hei[i]*joby[i],
          e:i,
          w:t.info.period,
          p:t.shinchoku,
          i:t.info.id,
          t:t.info.name
        });
        jobx[i]+=t.info.period;
      }
    });
    function registerCarry(){
      var px,py;
      k.carry.s.affined((v)=>{
        px = v[2], py = v[5];
      })
      Po.removeDrag(k.carry.s);
      var tx = Math.floor((px-tabX)/(tabW/4)+0.5);
      var ty = Math.floor((py-tabY)/(tabH/6)+0.5)-1;
      var valid = true;
      valid = valid && (tx+tdX.at() >= 0);
      valid = valid && (tx+k.carry.w+tdX.at() <= 12);
      valid = valid && ty < Schedule.memberList.length;
      valid = valid && Schedule.memberList[ty].job == k.carry.e;
      if(valid)k.regd.forEach((r)=>{
        if(valid && r.y==ty){
          var col = Util.intersect(r.x+0.1,0,r.w-0.2,1)(tx+tdX.at()+0.1,0,k.carry.w-0.2,1);
          if(col!=null)valid = false;
        }
      });
      if(valid){
        var info = null;
        for(var i=0;i<Schedule.allTaskInfo.length;i++){
          if(Schedule.allTaskInfo[i].id == k.carry.i){
            info = Schedule.allTaskInfo[i];
          }
        }
        if(!info || !Schedule.memberList[ty].addTask(info,tx+tdX.at())){
          valid = false;
        }
      }
      if(ty<0 || ty>4 || tx>3 || !valid){//item
        if(py<itemY+20 || py>Po.size.y*0.8-70 || px<itemX-20)px = itemX + 20, py = itemY + 20;
        k.item.push({x:px-itemX,y:py-itemY,e:k.carry.e,i:k.carry.i,p:k.carry.p,w:k.carry.w,t:k.carry.t});
      }else{
        k.regd.push({x:tx+tdX.at(),y:ty,e:k.carry.e,i:k.carry.i,p:k.carry.p,w:k.carry.w,t:k.carry.t});
      }
      k.setButtons(tdX.at(),itX.at());
      k.carry = null;
    }
    k.setButtons = (tx,ix)=>{
      k.regd.forEach((t)=>{
        if(t.sr)Po.removeButton(t.sr);
      });
      k.item.forEach((t)=>{
        if(t.sr)Po.removeButton(t.sr);
      });
      k.regd.forEach((t)=>{
        t.s = Shape.roundrect(t.w*tabW/4-10,tabH/6-20,5);
        t.s.translate(tabX+(t.x-tx)*tabW/4+5,tabY+tabH/6+t.y*tabH/6+10);
      });
    };
    k.setButtons(tdX.at(),itX.at());
    return k;
  })();

  var next = Shape.roundrect(200,60,10).with(Shape.translate(-100,-30)).with(Po.button(()=>{
    Music.once("decide");
    Po.transit("Title");
  }));
  next.translate(Po.size.x-125,50);
  var flag = false;
  scene.step = ()=>{
    if(Po.local == 0){
      plate.set(0);
    }
    next.onCollide(Po.mouse.x, Po.mouse.y, (x,y) => {
      if (flag == false) {
        flag = true;
        Music.once("over");
      }
    }, (x,y) => {
      flag = false;
    })
  }
  var move = Po.ease(0).cubic.in(40);
  scene.end = (t,kill)=>{
    if(t==0)move.set(2*Po.size.x);
    if(move.done)kill();
  }
  scene.draw = (R,acc)=>{
    Shape.rect(Po.size.x,Po.size.y).with(R.fill(Theme.bg).draw);
    R.translated(-move(),0,()=>{
      R.clipped(0,0,Po.size.x,Po.size.y,()=>{
        Shape.rect(Po.size.x,Po.size.y).with(R.fill(Color.white).draw);
        Shape.rect(tabW,tabH).invert()
          .translate(tabX,tabY).with([
            R.fill(Theme.bg).shadow(10).draw,
            R.stroke(2,Theme.frame).draw
          ]);
        R.translated(0,-Po.size.y,()=>{
          acc();
        });
      });
      
      R.translated(0,plate(),()=>{
        Shape.text("リザルト").leftUp.scale(40,40).translate(15,15).with(R.fill(Theme.text).shadow(5).draw);
      });
      Shape.text("総合スコア").left.scale(30,30).translate(30,80).with(R.fill(Theme.text).shadow(3).draw);
      Shape.text(sumScore.toString()+"点").left.scale(40,40).translate(170,80).with(R.fill(Theme.wood).shadow(10).draw);

      R.translated(-10,0,()=>{
        Shape.text("ゲーム完成度").right.scale(20,20).translate(180-20,120).with(R.fill(Theme.text).shadow(3).draw);
        Shape.text(scoreCompletion.toString()+"点").left.scale(30,30).translate(170,120).with(R.fill(Theme.wood).shadow(10).draw);
        Shape.text("計画遂行度").right.scale(20,20).translate(380-20,120).with(R.fill(Theme.text).shadow(3).draw);
        Shape.text(scorePlanning.toString()+"点").left.scale(30,30).translate(370,120).with(R.fill(Theme.wood).shadow(10).draw);
        Shape.text("メンバー満足度").right.scale(20,20).translate(580-20,120).with(R.fill(Theme.text).shadow(3).draw);
        Shape.text(scoreMember.toString()+"点").left.scale(30,30).translate(570,120).with(R.fill(Theme.wood).shadow(10).draw);
      })

      function drawTask(t){
        if(Schedule.memberList[t.y].state == STATE_ZEKKI){
          R.darkened(0.2,()=>{
            R.lightened(0.9,()=>{
              t.s.with(R.fill(Theme.jobs[t.e]).shadow(5).draw);
            });
          });
        }else{
          R.lightened(0.9,()=>{
            t.s.with(R.fill(Theme.jobs[t.e]).shadow(5).draw);
          });
          R.transformed(t.s,()=>{
            R.clipped(0,0,t.w*t.p*tabW/4,tabH/6,()=>{
              t.s.with(R.fill(Theme.jobs[t.e]).draw);
            });
          });
        }
        R.darkened(0.3,()=>{
          t.s.with(R.stroke(2,Theme.jobs[t.e]).draw);
        });
        var sz = 30;
        sz = Math.min(sz,(t.w*tabW/4-20)/Shape.text(t.t).size.x);
        R.transformed(t.s,()=>{
          Shape.text(t.t).leftUp.scale(sz,sz).translate(5,5+(25-sz)/2).with(R.fill(Color.black).draw);
        });
      }
      
      R.transformed(table,()=>{
        for(var i=0;i<Schedule.memberList.length;i++){
          var j = Schedule.memberList[i].job;
          R.translated(0,tabH*(i+1)/6,()=>{
            var name = Schedule.getJobInitial(j)+"r";
            var img = Picture.get(name);
            R.translated(-50,0,()=>{
              //R.darkened(Schedule.memberList[i].state == STATE_KIKYO ? 0.3 : 0, ()=>{
                Shape.image(name).scale(40/img.width,80/img.height).with(R.fill(Theme.jobs[j]).draw);
              //});
              Shape.text(Schedule.memberList[i].name).right.scale(18,18).translate(0,20).with(R.fill(Color.black).draw);
            })
          });
        }
      });
      
      R.clipped(tabX,tabY,tabW,tabH,()=>{
        R.transformed(table,()=>{
          Shape.line(5,tabH/6*0.7,tabW-5,tabH/6*0.7).with(R.stroke(1,Color.black).draw);
          for(var i=0;i<Schedule.memberList.length;i++){
            var j = Schedule.memberList[i].job;
            R.translated(0,tabH*(i+1)/6,()=>{
              R.lightened(0.7,()=>{
                Shape.rect(tabW,tabH/6).with(R.fill(Theme.jobs[j]).draw);
              });
            });
          }
          for(var i=0;i<5;i++){
            R.translated(0,tabH*(i+1)/6,()=>{
              Shape.line(5,0,tabW-5,0).with(R.stroke(i==0?2:1,Color.black).draw);
            });
          }
          R.translated(-tdX()*tabW/4,0,()=>{
            for(var i=0;i<12;i++){
              R.translated(tabW*i/4,0,()=>{
                if(i%4==0)Shape.line(0,5,0,tabH-5).with(R.stroke(2,Color.grey).draw);
                else Shape.line(0,tabH/6*0.7+5,0,tabH-5).with(R.stroke(1,Color.grey).draw);
              });
            }
            for(var i=0;i<3;i++){
              R.translated(tabW*(i+0.5),tabH/18,()=>{
                numT((i+6).toString(),"月",35,0,R.fill(Color.black).draw);
              });
            }
          });
        });
        R.darkened(0.5-0.5*leftBtn.enabled,()=>{
          leftBtn.with([
              R.fill(Theme.transBtn).shadow(leftBtn.hover*5+5).draw,
              R.stroke(2,Theme.transFrm).draw
          ]);
        });
        R.darkened(0.5-0.5*rightBtn.enabled,()=>{
          rightBtn.with([
              R.fill(Theme.transBtn).shadow(rightBtn.hover*5+5).draw,
              R.stroke(2,Theme.transFrm).draw
          ]);
        });
      });
      R.clipped(tabX,tabY,tabW,tabH,()=>{
        R.translated(Task.reiD()*tabW/4,0,()=>{
          Task.regd.forEach((i)=>{
            drawTask(i);
          });
        });
      });
      Shape.rect(tabW,tabH).translate(tabX,tabY).with(R.stroke(2,Theme.frame).draw);
      Shape.text("最終計画表").right.scale(30,30).translate(150,190).with(R.fill(Theme.text).shadow(3).draw);
        
      next.with([
        R.fill(Theme.button).shadow(next.hover*3+5).draw,
        R.stroke(2,Theme.frame).draw
      ]);
      R.transformed(next,()=>{
        Shape.text("もういちど").center.scale(40,40).with(R.fill(Theme.text).draw);
      });
      R.translated(2*Po.size.x,0,()=>{
        acc();
      });
    });
  };
  return scene;
});

return [Report,Result];

})());
