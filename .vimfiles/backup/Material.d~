module sbylib.gl.Material;

import sbylib;
import derelict.opengl3.gl;
import derelict.opengl3.gl3;

struct Stencilsetting {
  /*ステンシルバッファの設定
    StencilTestがtrueのときに
    (現在のステンシル値&Mask)と(Eval&Mask)をFuncで比較

    例えば、FuncがLessのときには
    現在のステンシル値 < Eval
    のときに有効となる。

    書き込まれるステンシル値は以下のように決定する。
    if (ステンシルテストに失敗) StencilFailure
    else if (デプステストに失敗) DepthFailure
    else Success

   */
  StencilFunc Func = StencilFunc.Always;
  uint Eval = 1;
  uint Mask = ~0;
  StencilWriting StencilFailure = StencilWriting.Keep;
  StencilWriting DepthFailure = StencilWriting.Keep;
  StencilWriting Success = StencilWriting.Keep;

<<<<<<< HEAD
  void setStencil() @nogc const {
=======
  private void setStencil() @nogc const {
>>>>>>> crystal_fix
    glStencilFunc(Func, Eval, Mask);
    glStencilOp(StencilFailure, DepthFailure, Success);
  }
}

struct RenderConfig {
  Stencilsetting stencilsetting;

  @nogc:
<<<<<<< HEAD
    void cullFace(bool f){
      if(f)glEnable(GL_CULL_FACE);
      else glDisable(GL_CULL_FACE);
    }
  void depthTest(bool f){
    if(f)glEnable(GL_DEPTH_TEST);
    else glDisable(GL_DEPTH_TEST);
  }
  void depthMask(bool f){
    if(f)glDepthMask(GL_TRUE);
    else glDepthMask(GL_FALSE);
  }
  void wireframe(bool f) {
    if (f) glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    else   glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
  }

=======

    /**
      カリングの設定。trueにすると裏面を描画しなくなります。
     */
    void cullFace(bool f){
      if(f)glEnable(GL_CULL_FACE);
      else glDisable(GL_CULL_FACE);
    }
  /**
    深度テストの設定。	
   */
  void depthTest(bool f){
    if(f)glEnable(GL_DEPTH_TEST);
    else glDisable(GL_DEPTH_TEST);
  }
  /**
    深度マスクの設定。trueにすると深度バッファへ書き込みをしなくなります。
   */
  void depthMask(bool f){
    if(f)glDepthMask(GL_TRUE);
    else glDepthMask(GL_FALSE);
  }
  /**
    ワイヤーフレームの設定。trueにするとワイヤーフレーム表示になります。
   */
  void wireframe(bool f) {
    if (f) glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    else   glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
  }
  /**
    ステンシルテストの設定。trueにするとステンシルバッファを読み取りそれに応じた処理を行います。
   */
>>>>>>> crystal_fix
  void stencilTest(bool f, void function(ref Stencilsetting d) @nogc s){
    s(stencilsetting);
    if(f){
      glEnable(GL_STENCIL_TEST);
      stencilsetting.setStencil();
    }else glDisable(GL_STENCIL_TEST);
  }
<<<<<<< HEAD
  void blendEquation(BlendEquation b){
    glBlendEquation(b);
  }
=======
  /**
    合成方法の設定。src(書き込もうとしている色)とdst(書き込んである色)から次の色を決定する方法を決めます。
   */
  void blendEquation(BlendEquation b){
    glBlendEquation(b);
  }
  /**
    合成係数の設定。src(書き込もうとしている色)とdst(書き込んである色)に対する係数を決めます。
   */
  void blendFunc(BlendFunc src, BlendFunc dst) {
    glBlendFunc(src, dst);
  }
  /**
    設定の初期化。初期設定は
    カリング         - true
    深度テスト       - true
    深度マスク       - true
    ワイヤーフレーム - false
    ステンシル       - false
    合成方法         - Add
    合成係数         - One Zero
   */
>>>>>>> crystal_fix
  void defaulting(){
    cullFace(true);
    depthTest(true);
    depthMask(true);
    wireframe(false);
    stencilTest(false,(ref Stencilsetting d){});
    blendEquation(BlendEquation.Add);
<<<<<<< HEAD
=======
    blendFunc(BlendFunc.SrcAlpha, BlendFunc.OneMinusSrcAlpha);
>>>>>>> crystal_fix
  }
}

class Material {

  private RenderConfig config;
<<<<<<< HEAD
  void delegate(CustomObject, RenderConfig rc,void delegate()@nogc u) withMaterial;

  this(){
    withMaterial = (d, rc,u) @nogc{
=======
  /**
    マテリアルの設定。
   */
  void delegate(CustomObject, RenderConfig,void delegate()) withMaterial;

  this(){
    withMaterial = (d, rc,u) {
>>>>>>> crystal_fix
      rc.defaulting();
      u();
    };
  }

<<<<<<< HEAD
  void render(CustomObject custom, void delegate()@nogc draw) const {
=======
  void render(CustomObject custom, void delegate() draw) const {
>>>>>>> crystal_fix
    withMaterial(custom, config,draw);
  }
}
