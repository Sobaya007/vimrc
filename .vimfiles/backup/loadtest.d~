module model.modelloader.loadtest;

import model.imports;

// デバッグ用
class LoadTest {

private:
	bool _isLoaded = false;
	aiScene* _scene;

public:
	this(string path) {
		load(path);
	}

	~this() {
		clear();
	}

private:
	void load(string path) {
		_scene = cast(aiScene*)aiImportFile(
			toStringz(path),
			aiProcess_CalcTangentSpace | aiProcess_Triangulate | aiProcess_JoinIdenticalVertices | aiProcess_SortByPType
		);

		if (_scene) {
			test(path);
			_isLoaded = true;
		} else {
			auto errorMessage = format("%s", fromStringz(aiGetErrorString()));
			throw new AssetException(errorMessage);
		}
	}

	// 
	void test(string path) {
		with(_scene) {
			mNumMaterials.writeln;
			mMaterials[0..mNumMaterials].writeln;
			foreach(m; mMaterials[0..mNumMaterials]) {
				aiString aiPath;
				(aiGetMaterialTexture(m, aiTextureType_DIFFUSE, 0, &aiPath, null, null, null, null, null) == aiReturn_SUCCESS).writeln;
			}
			
			mNumMeshes.writeln;
			mMeshes[0..mNumMeshes].writeln;
			foreach(mesh; mMeshes[0..mNumMeshes]) {
				with(mesh) {
					mMaterialIndex.writeln;
					//mVertices[0..mNumVertices].map!(v => [v.x, v.y, v.z, 1.0f]).array.join.writeln;
					//mNormals[0..mNumVertices].map!(n => [n.x, n.y, n.z]).array.join.writeln;
					mTextureCoords.writeln;
					//mTextureCoords[0][0..mNumVertices].map!(t => [t.x, t.y]).array.join.writeln;
				}
			}
		}
	}

	void clear() {
		if (_isLoaded) {
			aiReleaseImport(_scene);
			_isLoaded = false;
		}
	}
}